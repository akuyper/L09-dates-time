---
title: "L09 Dates & Time"
subtitle: "Data Science 1 with R (STAT 301-1)"
author: "YOUR NAME"
pagetitle: "L09 YOUR NAME"

format:
  html:
    toc: true
    toc-depth: 4
    toc-location: left
    embed-resources: true
    code-fold: false
    link-external-newwindow: true

execute:
  warning: false

from: markdown+emoji
reference-location: margin
citation-location: margin  
---

::: {.callout-tip icon=false}

## Github Repo Link

To link to your github **repo**sitory, appropriately edit the example link below. Meaning replace `https://your-github-repo-url` with your github repo url. Suggest verifying the link works before submitting.

[https://your-github-repo-url](https://your-github-repo-url)

:::

## Overview

The goal of this lab is to learn and understand how to work with dates and times in R (which is surprisingly complex). The `lubridate` package makes it easier to work with dates and times within R in an intuitive framework with methods that can handle time zones, leap days, daylight savings times, and other issues related to time. 

These resources may help:

* [`lubridate` tidyverse homepage](http://lubridate.tidyverse.org/reference/index.html)
* [`lubridate` vignette (highly recommend)](https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html)

## Load packages

You should always begin by loading all necessary packages towards the beginning of your document.

```{r}
#| label: load-pkgs

# Loading package(s)

```

## Datasets 

We will be utilizing a modified version the familiar `flights` dataset from `nycflights13` for all exercises involving variables associated with `flights` (see `?flights` for documentation). That is, we won't be using `flights`, we will be using the modified version called `flights_dt` which was created in [Chapter 18 Dates and times](https://r4ds.hadley.nz/datetimes). 

::: {.callout-important}
Code to build `flights_dt` can be found in [Chapter 18 Dates and times](https://r4ds.hadley.nz/datetimes).
:::

## Exercises

### Exercise 1 

At the top of the document in the yaml header, define the `date` to be the current date using `today`.

Might be helpful: [Quarto Dates](https://quarto.org/docs/reference/dates.html)

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 2

What happens if you try to parse a string that contains invalid dates, like this one?

```{r}
#| label: ex-01
#| eval: false

# invalid string example
ymd(c("2010-10-10", "bananas"))
```

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

### Exercise 3

Use the appropriate `lubridate` function to parse each of the following dates:

```{r}
#| label: ex-02
#| eval: false

# dates to parse
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
```

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::


### Exercise 4

Compare `dep_time`, `sched_dep_time` and `dep_delay`. Are they consistent? Explain your findings.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::


### Exercise 5

How does the average delay time change over the course of a day? Should you use `dep_time` or `sched_dep_time` to assess this? Explain your choice.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::


### Exercise 6

On what day of the week should you leave if you want to minimize the chance of a delay?

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::


### Exercise 7

Create a tibble with 3 variables containing the following:

1. every month in a year (i.e., `"January"`),
2. the date of the first day of each month (i.e., `"2025-01-01"`), and 
3. the day of the week that each first day falls on (i.e., `"Tuesday"`). 

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

## Case Study

::: {.callout-warning}

The final product is meant for your boss and they expect your work to be clear, to the point, and presentable! They don't care about code so it shouldn't be visible or even accessible. 

Make your graphic(s) look nice. Appropriate summary statistics should be displayed as a table.

:::


Use the `tinder_data` file in the `data/` subdirectory to complete the following tasks.^[This dataset was sourced from [Swipestats.io](https://www.swipestats.io/).] 

1. Describe the distribution of `age_current` on Tinder (calculated from the current date to their birth date). We typically express age in years, round down to the nearest whole number.
2. Describe the distribution of `age_joined` on Tinder (calculated from `user_create_date` and `user_birth_date`). We typically express age in years, round down to the nearest whole number.
3. Which distribution do you believe is a more accurate representation of user age and why?

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::

## Graduate Challenge

::: callout-important

Graduate students are required to complete this challenge. **It is optional for undergraduate students.**

:::

For the case study above, convert the variables you created (`age_current` or `age_joined`) into a binned variable that is an ordered factor. Describe the distribution of user age using these new binned variable. Are your conclusions the same or different from your previous analysis.

::: {.callout-tip icon="false"}
## Solution

YOUR SOLUTION HERE

:::
